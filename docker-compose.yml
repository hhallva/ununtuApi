services:
  sluze:
     container_name: "sluze"
     image: ${DOCKER_REGISTRY-}sluze
     build:
       context: .
       dockerfile: sluze/Dockerfile
     environment:
       - ASPNETCORE_ENVIRONMENT=Development
     ports:
       - "5000:8080"
     depends_on:
       - productservice
       - orderservice
     links:
       - productservice
       - orderservice
     networks:
       - net

  productservice:
    container_name: "productservice"
    image: ${DOCKER_REGISTRY-}productservice
    build:
      context: .
      dockerfile: ProductService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - CONNECTION_STRING=Server=productdb;Database=Products;User=root;Password=root;Port=3306 
    depends_on:
      - productdb 
    links:
      - productdb
    networks:
      - net

  orderservice:
    container_name: "orderservice"
    image: ${DOCKER_REGISTRY-}orderservice
    build:
      context: .
      dockerfile: OrderService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - CONNECTION_STRING=Server=orderdb;Database=Orders;User=root;Password=root;Port=3306 
    depends_on:
      - orderdb 
    links:
      - orderdb
    networks:
      - net

  productdb:
    container_name: "productdb"
    image: mysql:latest
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: Products
      MYSQL_USER: root
      MYSQL_PASSWORD: root
    volumes:
      - productdb:/var/lib/mysql
    networks:
      - net

  orderdb:
    container_name: "orderdb"
    image: mysql:latest
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: Orders
      MYSQL_USER: root
      MYSQL_PASSWORD: root
    volumes:
      - orderdb:/var/lib/mysql
    networks:
      - net

volumes:
  productdb:
  orderdb:

networks:
  net:
